{"version":3,"sources":["SolCalendar.js","MainSol.js","App.js","reportWebVitals.js","index.js"],"names":["SolCalendar","props","calendar","solData","map","data","className","onClick","setObjectDisplay","setSolKey","sol","lastUTC","split","avTemp","avWind","avPressure","season","reverse","MainSol","faTimesIcon","icon","faTimes","mainSolObject","style","minTemp","maxTemp","minWind","maxWind","minPressure","maxPressure","solIndex","App","useState","apiData","setApiData","sensorData","setSensorData","objectDisplay","solKey","setSolIndex","useEffect","fetch","then","response","json","length","console","log","sol_keys","firstUTC","First_UTC","Last_UTC","AT","mx","mn","av","ctTemp","ct","HWS","ctWind","PRE","ctPressure","compassDegrees","WD","compass_degrees","compassPoint","compass_point","compassRight","compass_right","compassUp","compass_up","ctCompass","Season","document","getElementsByClassName","display","solArray","findIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d7ba19c0.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction SolCalendar(props) {\r\n  let calendar = props.solData.map(data => { return (\r\n    <div className=\"solBlock\" key={data.sol} onClick={() => { return (\r\n      props.setObjectDisplay(true),\r\n      props.setSolKey(data.sol)\r\n    )}}>\r\n      <div className=\"solTitle\">\r\n        <center>\r\n          <h2>SOL {props.solData ? data.sol : \"Loading...\" }</h2>\r\n          <p><b>{props.solData ? data.lastUTC.split(\"T\")[0] : \"Loading...\" }</b></p>\r\n        </center>\r\n      </div>\r\n      <div className=\"solSensor\">\r\n        <p>Average Temperature: <b>{props.solData ? data.avTemp : \"Loading...\" }</b></p>\r\n        <p>Average Wind Speed: <b>{props.solData ? data.avWind : \"Loading...\" }</b></p>\r\n        <p>Average Atm. Pressure: <b>{props.solData ? data.avPressure : \"Loading...\" }</b></p>\r\n        <p>Season: <b>{props.solData ? data.season : \"Loading...\" }</b></p>\r\n      </div>\r\n    </div>\r\n  )})\r\n\r\n  return (\r\n    <div className=\"solContainer\">\r\n      {calendar.reverse()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SolCalendar\r\n","import React from \"react\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction MainSol(props) {\r\n\r\nconst faTimesIcon = <FontAwesomeIcon icon={faTimes} />\r\n\r\nlet mainSolObject = props.solData.map(data => { return (\r\n    <div style={{\"height\" : \"100%\"}}>\r\n        <div className=\"closeItem\" onClick={() => props.setObjectDisplay(false)}>\r\n          {faTimesIcon}\r\n        </div>\r\n        <h1><b>SOL { props.solData ? data.sol : \"Loading...\" }</b></h1>\r\n        <h3><b>{props.solData ? data.lastUTC.split(\"T\")[0] : \"Loading...\" }</b></h3>\r\n        <div className=\"arrangeClimateData\">\r\n          <div className=\"climateData\">\r\n            <h2>Temperature</h2>\r\n            <p>Min: <b>{ props.solData ? data.minTemp : \"Loading...\" }</b></p>\r\n            <p>Max: <b>{ props.solData ? data.maxTemp : \"Loading...\" }</b></p>\r\n            <p>Average: <b>{ props.solData ? data.avTemp : \"Loading...\" }</b></p>\r\n          </div>\r\n          <div className=\"climateData\">\r\n            <h2>Wind Speed</h2>\r\n            <p>Min: <b>{ props.solData ? data.minWind : \"Loading...\" }</b></p>\r\n            <p>Max: <b>{ props.solData ? data.maxWind : \"Loading...\" }</b></p>\r\n            <p>Average: <b>{ props.solData ? data.avWind : \"Loading...\" }</b></p>\r\n          </div>\r\n          <div className=\"climateData\">\r\n            <h2>Atm. Pressure</h2>\r\n            <p>Min: <b>{ props.solData ? data.minPressure : \"Loading...\" }</b></p>\r\n            <p>Max: <b>{ props.solData ? data.maxPressure : \"Loading...\" }</b></p>\r\n            <p>Average: <b>{ props.solData ? data.avPressure : \"Loading...\" }</b></p>\r\n          </div>\r\n        </div>\r\n        <div className=\"climateData\">\r\n          <h2>Season: <b>{ props.solData ? data.season : \"Loading...\" }</b></h2>\r\n        </div>\r\n    </div>\r\n)})\r\n\r\n  return (\r\n    <div className=\"solDetails\">\r\n      {mainSolObject[props.solIndex]}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainSol\r\n","import React, {useState, useEffect} from \"react\"\nimport \"./App.css\"\n\nimport SolCalendar from \"./SolCalendar\"\nimport MainSol from \"./MainSol\"\n\nfunction App() {\n  const [apiData, setApiData] = useState([])\n\n  const [sensorData, setSensorData] = useState([])\n  const [objectDisplay, setObjectDisplay] = useState(true)\n  const [solKey, setSolKey] = useState(null)\n  const [solIndex, setSolIndex] = useState(null)\n\n  //Fetching API data first time when the webpage is running\n  useEffect(() => {\n      fetch(\"https://api.nasa.gov/insight_weather/?api_key=idxK642jMOKhf0bDFYXHRlqcOft119CEs2Vj1u4c&feedtype=json&ver=1.0\")\n      .then(response => response.json())\n      .then(response => {\n        setApiData(response)\n      })\n  }, [])\n\n  //When the data is retrieved from the api, and put in the apiData state, the data gets mapped into a new array to create a managable dataset to use in the interface.\n  //The datastructure isn't always the same, sometimes certain chunks of data from mars doesn't return. To prevent the application from crashing, the data gets checked if it exists. If it doesn't,\n  //it will return a string with \"No data\".\n  useEffect(() => {\n    if(apiData.length === 0) {\n      console.log(\"loading API data...\")\n    } else {\n      setSensorData(apiData.sol_keys.map(solKey => {\n        return {\n          sol: solKey ? solKey : \"Inactive\",\n          firstUTC: apiData[solKey].First_UTC ? apiData[solKey].First_UTC : \"No data\",\n          lastUTC: apiData[solKey].Last_UTC ? apiData[solKey].Last_UTC : \"No data\",\n          maxTemp: apiData[solKey].AT ? apiData[solKey].AT.mx : \"No data\",\n          minTemp: apiData[solKey].AT ? apiData[solKey].AT.mn : \"No data\",\n          avTemp: apiData[solKey].AT ? apiData[solKey].AT.av : \"No data\",\n          ctTemp: apiData[solKey].AT ? apiData[solKey].AT.ct : \"No data\",\n          maxWind: apiData[solKey].HWS ? apiData[solKey].HWS.mx : \"No data\",\n          minWind: apiData[solKey].HWS ? apiData[solKey].HWS.mn : \"No data\",\n          avWind: apiData[solKey].HWS ? apiData[solKey].HWS.av : \"No data\",\n          ctWind: apiData[solKey].HWS ? apiData[solKey].HWS.ct : \"No data\",\n          maxPressure: apiData[solKey].PRE ? apiData[solKey].PRE.mx : \"No data\",\n          minPressure: apiData[solKey].PRE ? apiData[solKey].PRE.mn : \"No data\",\n          avPressure: apiData[solKey].PRE ? apiData[solKey].PRE.av : \"No data\",\n          ctPressure: apiData[solKey].PRE ? apiData[solKey].PRE.ct : \"No data\",\n          compassDegrees: apiData[solKey].WD[0] ? apiData[solKey].WD[0].compass_degrees : \"No data\",\n          compassPoint: apiData[solKey].WD[0] ? apiData[solKey].WD[0].compass_point : \"No data\",\n          compassRight: apiData[solKey].WD[0] ? apiData[solKey].WD[0].compass_right : \"No data\",\n          compassUp: apiData[solKey].WD[0] ? apiData[solKey].WD[0].compass_up : \"No data\",\n          ctCompass: apiData[solKey].WD[0] ? apiData[solKey].WD[0].ct : \"No data\",\n          season: apiData[solKey].Season ? apiData[solKey].Season : \"No data\"\n        }\n      }))\n      console.log(\"API data retrieved!\")\n    }\n  }, [apiData])\n\n  useEffect(() => {\n    if(objectDisplay === false) {\n      document.getElementsByClassName(\"solDetails\")[0].style.display = \"none\"\n    } else {\n      document.getElementsByClassName(\"solDetails\")[0].style.display = \"block\"\n    }\n  }, [objectDisplay])\n\n  useEffect(() => {\n    let solArray = sensorData.map(data => data.sol)\n\n    function searchSolIndex(sol) {\n      return sol >= solKey;\n    }\n\n    if(sensorData.length > 0) {\n      setSolIndex(solArray.findIndex(searchSolIndex))\n    }\n  }, [solKey, sensorData])\n\n  return (\n    <div>\n      <h1 className=\"pageTitle\">\n        Mars Weather\n      </h1>\n      <SolCalendar\n        solData={sensorData}\n        objectDisplay={objectDisplay}\n        setObjectDisplay={setObjectDisplay}\n        solKey={solKey}\n        setSolKey={setSolKey}\n      />\n      <MainSol\n        solData={sensorData}\n        objectDisplay={objectDisplay}\n        setObjectDisplay={setObjectDisplay}\n        solKey={solKey}\n        solIndex={solIndex}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}